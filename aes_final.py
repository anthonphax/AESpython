# -*- coding: utf-8 -*-
"""aes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DU0YktsC5X38vSrCg00IBRAvsbu-LHdT
"""

import numpy as np

plaintext = "0123456789ABCDEFFEDCBA9876543210"
key = "0F1571C947D9E8590CB7ADD6AF7F6798"



cifra_esperada = 'FF0B844A0853BF7C6934AB4364148FB9'

S_BOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


RCON = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
    0x1B, 0x36
]

def bytes_to_hex_string(byte_array):
    return ''.join(f'{byte:02X}' for byte in byte_array)

def hex_to_bytes(hex_string):
    return bytes.fromhex(hex_string)

def galois_multiplication(a, b):
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x1b
        b >>= 1
    return p & 0xFF

def sub_bytes(state):
    return np.array([S_BOX[byte] for byte in state], dtype=np.uint8)

def shift_rows(state): #deslocamento circular
    state = state.reshape((4, 4))
    state[1] = np.roll(state[1], -1)
    state[2] = np.roll(state[2], -2)
    state[3] = np.roll(state[3], -3)
    return state.flatten()

def mix_column(column):
    def xtime(byte):
      return ((byte << 1) ^ (0x1B & -(byte >> 7))) & 0xFF

    a0, a1, a2, a3 = column

    return np.array([
        xtime(a0) ^ xtime(a1) ^ a1 ^ a2 ^ a3,  # C0
        a0 ^ xtime(a1) ^ xtime(a2) ^ a2 ^ a3,  # C1
        a0 ^ a1 ^ xtime(a2) ^ xtime(a3) ^ a3,  # C2
        xtime(a0) ^ a0 ^ a1 ^ a2 ^ xtime(a3)   # C3
    ], dtype=np.uint8)


def mix_columns(state):
    state = state.reshape((4, 4))

    print(state)

    for i in range(4):
        column = state[:, i]
        mixed_column = mix_column(column)

        state[:, i] = mixed_column # retorna à matriz

    return state.flatten() # array achatado (tamanho 16)


def add_round_key(state, round_key):
    return np.bitwise_xor(state.reshape((4, 4)).T, round_key.reshape((4, 4))).T.flatten()

def expand_key(key):
    key = key.reshape((4, 4)).T.flatten()
    key_length = len(key)
    expanded_key = np.zeros((44, 4), dtype=np.uint8)

    for i in range(4):
        expanded_key[i, :] = key[i*4:(i+1)*4]

    for i in range(4, 44):
        temp = expanded_key[i-1, :].copy()

        if i % 4 == 0:
            # Rotate and substitute
            temp = np.roll(temp, -1)
            temp = np.array([S_BOX[b] for b in temp], dtype=np.uint8)
            temp[0] ^= RCON[i // 4 - 1]

        expanded_key[i, :] = expanded_key[i - 4, :] ^ temp

    print(expanded_key)

    return expanded_key.flatten()

def print_state(state, round_num, operation):
    print(f"{operation} (rodada: {round_num}):")

    for i in range(0, len(state), 4):
        row = state[i:i+4]
        print(' '.join(hex(b).replace("0x", "") for b in row))

    print()

def transpor_e_concatenar(matriz):
    # Transpor a matriz
    matriz_transposta = list(zip(*matriz))

    # Concatenar os valores em uma única string
    resultado = ''.join(''.join(linha) for linha in matriz_transposta)

    return resultado

def aes_encrypt(plaintext, key):
    state = np.frombuffer(hex_to_bytes(plaintext), dtype=np.uint8)
    key = np.frombuffer(hex_to_bytes(key), dtype=np.uint8)

    state = state.reshape((4, 4)).T.flatten()
    key = key.reshape((4, 4)).T.flatten()

    print_state(state, 0, "estado inicial")
    print_state(key, 0, "Key inicial")

    expanded_key = expand_key(key)
    print_state(expanded_key, 0, "chave expandida")

    state = add_round_key(state, expanded_key[:16])
    print_state(state, 0, "Round Key inicial")

    for round in range(10):
        state = sub_bytes(state)
        print_state(state, round + 1, "Sub Bytes")

        state = shift_rows(state)
        print_state(state, round + 1, "Shift Rows")

        if round < 9:  # Não mistura na última rodada
            state = mix_columns(state)
            print_state(state, round + 1, "Mix Columns")

        round_key = expanded_key[(round + 1) * 16:(round + 2) * 16]
        round_key = round_key.reshape((4, 4)).flatten()

        state = add_round_key(state, round_key)
        print_state(state, round + 1, "Round Key")

    matriz = [state[i:i+4] for i in range(0,16,4)]

    resultado = ""

    for col in range(4):
      for row in range(4):
          resultado += f"{matriz[row][col]:02x} "

    print(resultado.strip())

    return bytes_to_hex_string(state)


encrypted_text = aes_encrypt(plaintext, key)